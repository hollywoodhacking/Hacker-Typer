#!/usr/bin/env bash

global_variables() {
    global_software_name="BashBlog"
    global_software_version="1.6.3"

    global_title="My fancy blog"
    global_description="A blog about turtles and carrots"
    global_url="http://example.com/blog"

    global_author="John Smith"
    global_author_url="http://twitter.com/example"
    global_email="john@smith.com"

    global_license="CC by-nc-nd"
    global_analytics=""
    global_feedburner=""

    global_twitter_username=""
    global_disqus_username=""

    index_file="index.html"
    number_of_index_articles="8"
    archive_index="all_posts.html"
    blog_feed="feed.rss"
    number_of_feed_articles="10"

    template_comments="Comments?"
    template_archive="View more posts"
    template_archive_index_page="Back to the index page"
    template_subscribe="Subscribe"
    template_subscribe_browser_button="Subscribe to this page..."
    template_twitter_button="Tweet"

    template_twitter_comment="&amp;lt;Type your comment here but please leave the URL so that other people can follow the comments&amp;gt;"

    date_format="%B %d, %Y"
    date_locale="C"
}

google_analytics() {
    if [ "$global_analytics" == "" ]; then return; fi

    echo "&lt;script type=\"text/javascript\"&gt;

    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', '"$global_analytics"']);
    _gaq.push(['_trackPageview']);

    (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

&lt;/script&gt;"
}

# Prints the required code for disqus comments
disqus_body() {
    if [ "$global_disqus_username" == "" ]; then return; fi

    echo '&lt;div id="disqus_thread"&gt;&lt;/div&gt;
            &lt;script type="text/javascript"&gt;
            /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
               var disqus_shortname = '\'$global_disqus_username\''; // required: replace example with your forum shortname

            /* * * DONT EDIT BELOW THIS LINE * * */
            (function() {
            var dsq = document.createElement("script"); dsq.type = "text/javascript"; dsq.async = true;
            dsq.src = "//" + disqus_shortname + ".disqus.com/embed.js";
            (document.getElementsByTagName("head")[0] || document.getElementsByTagName("body")[0]).appendChild(dsq);
            })();
            &lt;/script&gt;
            &lt;noscript&gt;Please enable JavaScript to view the &lt;a href="http://disqus.com/?ref_noscript"&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;
            &lt;a href="http://disqus.com" class="dsq-brlink"&gt;comments powered by &lt;span class="logo-disqus"&gt;Disqus&lt;/span&gt;&lt;/a&gt;'
}

# Prints the required code for disqus in the footer
disqus_footer() {
    if [ "$global_disqus_username" == "" ]; then return; fi
       echo '&lt;script type="text/javascript"&gt;
               /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
               var disqus_shortname = '\'$global_disqus_username\''; // required: replace example with your forum shortname

               /* * * DONT EDIT BELOW THIS LINE * * */
               (function () {
               var s = document.createElement("script"); s.async = true;
               s.type = "text/javascript";
               s.src = "//" + disqus_shortname + ".disqus.com/count.js";
               (document.getElementsByTagName("HEAD")[0] || document.getElementsByTagName("BODY")[0]).appendChild(s);
               }());
               &lt;/script&gt;'
}


edit() {
    timestamp="$(date -r $1 +'%Y%m%d%H%M')"
    $EDITOR "$1"
    touch -t $timestamp "$1"
}


twitter() {
    if [[ "$global_twitter_username" == "" ]]; then return; fi

    if [[ "$global_disqus_username" == "" ]]; then
        echo "&lt;p id='twitter'&gt;$template_comments&amp;nbsp;"
    else
        echo "&lt;p id='twitter'&gt;&lt;a href=\"$1#disqus_thread\"&gt;$template_comments&lt;/a&gt; &amp;nbsp;"
    fi  

    echo "&lt;a href=\"https://twitter.com/share\" class=\"twitter-share-button\" data-text=\"&amp;lt;Type your comment here but please leave the URL so that other people can follow the comments&amp;gt;\" data-url=\"$1\""

    echo " data-via=\"$global_twitter_username\""

    echo "&gt;$template_twitter_button&lt;/a&gt;	&lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=\"//platform.twitter.com/widgets.js\";fjs.parentNode.insertBefore(js,fjs);}}(document,\"script\",\"twitter-wjs\");&lt;/script&gt;"
    echo "&lt;/p&gt;"
}


create_html_page() {
    content="$1"
    filename="$2"
    index="$3"
    title="$4"
    timestamp="$5"

    # Create the actual blog post
    # html, head
    cat ".header.html" &gt; "$filename"
    echo "&lt;title&gt;$title&lt;/title&gt;" &gt;&gt; "$filename"
    google_analytics &gt;&gt; "$filename"
    echo "&lt;/head&gt;&lt;body&gt;" &gt;&gt; "$filename"
    # body divs
    echo '&lt;div id="divbodyholder"&gt;' &gt;&gt; "$filename"
    echo '&lt;div class="headerholder"&gt;&lt;div class="header"&gt;' &gt;&gt; "$filename"
    # blog title
    echo '&lt;div id="title"&gt;' &gt;&gt; "$filename"
    cat .title.html &gt;&gt; "$filename"
    echo '&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;' &gt;&gt; "$filename" # title, header, headerholder
    echo '&lt;div id="divbody"&gt;&lt;div class="content"&gt;' &gt;&gt; "$filename"

    file_url="$(sed 's/.rebuilt//g' &lt;&lt;&lt; $filename)" # Get the correct URL when rebuilding
    # one blog entry
    if [ "$index" == "no" ]; then
        echo '&lt;!-- entry begin --&gt;' &gt;&gt; "$filename" # marks the beginning of the whole post
        echo '&lt;h3&gt;&lt;a class="ablack" href="'$global_url/$file_url'"&gt;' &gt;&gt; "$filename"
        echo "$title" &gt;&gt; "$filename"
        echo '&lt;/a&gt;&lt;/h3&gt;' &gt;&gt; "$filename"
        if [ "$timestamp" == "" ]; then
            echo '&lt;div class="subtitle"&gt;'$(LC_ALL=date_locale date +"$date_format")' &amp;mdash; ' &gt;&gt; "$filename"
        else
            echo '&lt;div class="subtitle"&gt;'$(LC_ALL=date_locale date +"$date_format" --date="$timestamp") ' &amp;mdash; ' &gt;&gt; "$filename"
        fi
        echo "$global_author&lt;/div&gt;" &gt;&gt; "$filename"
        echo '&lt;!-- text begin --&gt;' &gt;&gt; "$filename" # This marks the text body, after the title, date...
    fi
    cat "$content" &gt;&gt; "$filename" # Actual content
    if [ "$index" == "no" ]; then
        echo '&lt;!-- text end --&gt;' &gt;&gt; "$filename"

        twitter "$global_url/$file_url" &gt;&gt; "$filename"

        echo '&lt;!-- entry end --&gt;' &gt;&gt; "$filename" # absolute end of the post
    fi

    echo '&lt;/div&gt;' &gt;&gt; "$filename" # content

    # Add disqus commments except for index and all_posts pages
    if [[ ${filename%.*.*} !=  "index" &amp;&amp; ${filename%.*.*} != "all_posts" ]]; then
    	disqus_body &gt;&gt; "$filename"
    fi
    # page footer
    cat .footer.html &gt;&gt; "$filename"
    # close divs
    echo '&lt;/div&gt;&lt;/div&gt;' &gt;&gt; "$filename" # divbody and divbodyholder 
    disqus_footer &gt;&gt; "$filename"
    echo '&lt;/body&gt;&lt;/html&gt;' &gt;&gt; "$filename"
}

# Parse the plain text file into an html file
parse_file() {
    # Read for the title and check that the filename is ok
    title=""
    while read line; do
        if [ "$title" == "" ]; then
            title="$line"
            filename="$(echo $title | tr [:upper:] [:lower:])"
            filename="$(echo $filename | sed 's/\ /-/g')"
            filename="$(echo $filename | tr -dc '[:alnum:]-')" # html likes alphanumeric
            filename="$filename.html"
            content="$filename.tmp"

            # Check for duplicate file names
            while [ -f "$filename" ]; do
                suffix="$RANDOM"
                filename="$(echo $filename | sed 's/\.html/'$suffix'\.html/g')"
            done
        else
            echo "$line" &gt;&gt; "$content"
        fi
    done &lt; "$TMPFILE"

    # Create the actual html page
    create_html_page "$content" "$filename" no "$title"
    rm "$content"
}

# Manages the creation of the text file and the parsing to html file
# also the drafts
write_entry() {
    if [ "$1" != "" ]; then
        TMPFILE="$1"
        if [ ! -f "$TMPFILE" ]; then
            echo "The file doesn't exist"
            delete_includes
            exit
        fi
    else
        TMPFILE=".entry-$RANDOM.html"
        echo "Title on this line" &gt;&gt; "$TMPFILE"
        echo "" &gt;&gt; "$TMPFILE"
        echo "&lt;p&gt;The rest of the text file is an &lt;b&gt;html&lt;/b&gt; blog post. The process" &gt;&gt; "$TMPFILE"
        echo "will continue as soon as you exit your editor&lt;/p&gt;" &gt;&gt; "$TMPFILE"
    fi
    chmod 600 "$TMPFILE"

    post_status="E"
    while [ "$post_status" != "p" ] &amp;&amp; [ "$post_status" != "P" ]; do
        $EDITOR "$TMPFILE"
        parse_file "$TMPFILE" # this command sets $filename as the html processed file
        chmod 600 "$filename"

        echo -n "Preview? (Y/n) "
        read p
        if [ "$p" != "n" ] &amp;&amp; [ "$p" != "N" ]; then
            chmod 644 "$filename"
            echo "Open $global_url/$filename in your browser"
        fi

        echo -n "[P]ost this entry, [E]dit again, [D]raft for later? (p/E/d) "
        read post_status
        if [ "$post_status" == "d" ] || [ "$post_status" == "D" ]; then
            mkdir -p "drafts/"
            chmod 700 "drafts/"

            title="$(head -n 1 $TMPFILE)"
            title="$(echo $title | tr [:upper:] [:lower:])"
            title="$(echo $title | sed 's/\ /-/g')"
            title="$(echo $title | tr -dc '[:alnum:]-')"
            draft="drafts/$title.html"
            while [ -f "$draft" ]; do draft="drafts/$title-$RANDOM.html"; done

            mv "$TMPFILE" "$draft"
            chmod 600 "$draft"
            rm "$filename"
            delete_includes
            echo "Saved your draft as '$draft'"
            exit
        fi
        if [ "$post_status" == "e" ] || [ "$post_status" == "E" ]; then
            rm "$filename" # Delete the html file as it will be generated again
        fi
    done

    rm "$TMPFILE"
    chmod 644 "$filename"
    echo "Posted $filename"
}

# Create an index page with all the posts
all_posts() {
    echo -n "Creating an index page with all the posts "
    contentfile="$archive_index.$RANDOM"
    while [ -f "$contentfile" ]; do
        contentfile="$archive_index.$RANDOM"
    done

    echo "&lt;h3&gt;All posts&lt;/h3&gt;" &gt;&gt; "$contentfile"
    echo "&lt;ul&gt;" &gt;&gt; "$contentfile"
    for i in $(ls -t *.html); do
        if [ "$i" == "$index_file" ] || [ "$i" == "$archive_index" ]; then continue; fi
        echo -n "."
        # Title
        title="$(awk '/&lt;h3&gt;&lt;a class="ablack" href=".+"&gt;/, /&lt;\/a&gt;&lt;\/h3&gt;/{if (!/&lt;h3&gt;&lt;a class="ablack" href=".+"&gt;/ &amp;&amp; !/&lt;\/a&gt;&lt;\/h3&gt;/) print}' $i)"
        echo -n '&lt;li&gt;&lt;a href="'$global_url/$i'"&gt;'$title'&lt;/a&gt; &amp;mdash;' &gt;&gt; "$contentfile"
        # Date
        date="$(LC_ALL=date_locale date -r "$i" +"$date_format")"
        echo " $date&lt;/li&gt;" &gt;&gt; "$contentfile"
    done
    echo ""
    echo "&lt;/ul&gt;" &gt;&gt; "$contentfile"
    echo '&lt;div id="all_posts"&gt;&lt;a href="'$global_url'"&gt;'$template_archive_index_page'&lt;/a&gt;&lt;/div&gt;' &gt;&gt; "$contentfile"

    create_html_page "$contentfile" "$archive_index.tmp" yes "$global_title &amp;mdash; All posts"
    mv "$archive_index.tmp" "$archive_index"
    chmod 644 "$archive_index"
    rm "$contentfile"
}

# Generate the index.html with the content of the latest posts
rebuild_index() {
    echo -n "Rebuilding the index "
    newindexfile="$index_file.$RANDOM"
    contentfile="$newindexfile.content"
    while [ -f "$newindexfile" ]; do 
        newindexfile="$index_file.$RANDOM"
        contentfile="$newindexfile.content"
    done

    # Create the content file
    n=0
    for i in $(ls -t *.html); do # sort by date, newest first
        if [ "$i" == "$index_file" ] || [ "$i" == "$archive_index" ]; then continue; fi
        if [ "$n" -ge "$number_of_index_articles" ]; then break; fi
        awk '/&lt;!-- entry begin --&gt;/, /&lt;!-- entry end --&gt;/' "$i" &gt;&gt; "$contentfile"
        echo -n "."
        n=$(( $n + 1 ))
    done

    if [ "$global_feedburner" == "" ]; then
        echo '&lt;div id="all_posts"&gt;&lt;a href="'$archive_index'"&gt;'$template_archive'&lt;/a&gt; &amp;mdash; &lt;a href="'$blog_feed'"&gt;'$template_subscribe'&lt;/a&gt;&lt;/div&gt;' &gt;&gt; "$contentfile"
    else
        echo '&lt;div id="all_posts"&gt;&lt;a href="'$archive_index'"&gt;'$template_archive'&lt;/a&gt; &amp;mdash; &lt;a href="'$global_feedburner'"&gt;Subscribe&lt;/a&gt;&lt;/div&gt;' &gt;&gt; "$contentfile"
    fi

    echo ""

    create_html_page "$contentfile" "$newindexfile" yes "$global_title"
    rm "$contentfile"
    mv "$newindexfile" "$index_file"
    chmod 644 "$index_file"
}

# Displays a list of the posts
list_posts() {
    ls *.html &amp;&gt; /dev/null
    if [[ $? -ne 0 ]]; then
        echo "No posts yet. Use 'bb.sh post' to create one"
        return
    fi

    lines=""
    n=1
    for i in $(ls -t *.html); do
        if [ "$i" == "$index_file" ] || [ "$i" == "$archive_index" ]; then continue; fi
        line="$n # $(awk '/&lt;h3&gt;&lt;a class="ablack" href=".+"&gt;/, /&lt;\/a&gt;&lt;\/h3&gt;/{if (!/&lt;h3&gt;&lt;a class="ablack" href=".+"&gt;/ &amp;&amp; !/&lt;\/a&gt;&lt;\/h3&gt;/) print}' $i) # $(LC_ALL=date_locale date -r $i +"date_format")"
        lines="${lines}""$line""\n" # Weird stuff needed for the newlines
        n=$(( $n + 1 ))
    done 

    echo -e "$lines" | column -t -s "#"
}

# Generate the feed file
make_rss() {
    echo -n "Making RSS "

    rssfile="$blog_feed.$RANDOM"
    while [ -f "$rssfile" ]; do rssfile="$blog_feed.$RANDOM"; done

    echo '&lt;?xml version="1.0" encoding="UTF-8" ?&gt;' &gt;&gt; "$rssfile"
    echo '&lt;rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"&gt;' &gt;&gt; "$rssfile"
    echo '&lt;channel&gt;&lt;title&gt;'$global_title'&lt;/title&gt;&lt;link&gt;'$global_url'&lt;/link&gt;' &gt;&gt; "$rssfile"
    echo '&lt;description&gt;'$global_description'&lt;/description&gt;&lt;language&gt;en&lt;/language&gt;' &gt;&gt; "$rssfile"
    echo '&lt;lastBuildDate&gt;'$(date +"%a, %d %b %Y %H:%M:%S %z")'&lt;/lastBuildDate&gt;' &gt;&gt; "$rssfile"
    echo '&lt;pubDate&gt;'$(date +"%a, %d %b %Y %H:%M:%S %z")'&lt;/pubDate&gt;' &gt;&gt; "$rssfile"
    echo '&lt;atom:link href="'$global_url/$blog_feed'" rel="self" type="application/rss+xml" /&gt;' &gt;&gt; "$rssfile"

    n=0
    for i in $(ls -t *.html); do
        if [ "$i" == "$index_file" ] || [ "$i" == "$archive_index" ]; then continue; fi
        if [ "$n" -ge "$number_of_feed_articles" ]; then break; fi # max 10 items
        echo -n "."
        echo '&lt;item&gt;&lt;title&gt;' &gt;&gt; "$rssfile"
        echo "$(awk '/&lt;h3&gt;&lt;a class="ablack" href=".+"&gt;/, /&lt;\/a&gt;&lt;\/h3&gt;/{if (!/&lt;h3&gt;&lt;a class="ablack" href=".+"&gt;/ &amp;&amp; !/&lt;\/a&gt;&lt;\/h3&gt;/) print}' $i)" &gt;&gt; "$rssfile"
        echo '&lt;/title&gt;&lt;description&gt;&lt;![CDATA[' &gt;&gt; "$rssfile"
        echo "$(awk '/&lt;!-- text begin --&gt;/, /&lt;!-- entry end --&gt;/{if (!/&lt;!-- text begin --&gt;/ &amp;&amp; !/&lt;!-- entry end --&gt;/) print}' $i)" &gt;&gt; "$rssfile"

        echo "]]&gt;&lt;/description&gt;&lt;link&gt;$global_url/$i&lt;/link&gt;" &gt;&gt; "$rssfile"
        echo "&lt;guid&gt;$global_url/$i&lt;/guid&gt;" &gt;&gt; "$rssfile"
        echo "&lt;dc:creator&gt;$global_author&lt;/dc:creator&gt;" &gt;&gt; "$rssfile"
        echo '&lt;pubDate&gt;'$(date -r "$i" +"%a, %d %b %Y %H:%M:%S %z")'&lt;/pubDate&gt;&lt;/item&gt;' &gt;&gt; "$rssfile"

        n=$(( $n + 1 ))
    done

    echo '&lt;/channel&gt;&lt;/rss&gt;' &gt;&gt; "$rssfile"
    echo ""

    mv "$rssfile" "$blog_feed"
    chmod 644 "$blog_feed"
}

# generate headers, footers, etc
create_includes() {
    echo '&lt;h1 class="nomargin"&gt;&lt;a class="ablack" href="'$global_url'"&gt;'$global_title'&lt;/a&gt;&lt;/h1&gt;' &gt; ".title.html"
    echo '&lt;div id="description"&gt;'$global_description'&lt;/div&gt;' &gt;&gt; ".title.html"

    echo '&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;' &gt; ".header.html"
    echo '&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;&lt;head&gt;' &gt;&gt; ".header.html"
    echo '&lt;meta http-equiv="Content-type" content="text/html;charset=UTF-8" /&gt;' &gt;&gt; ".header.html"
    echo '&lt;link rel="stylesheet" href="main.css" type="text/css" /&gt;' &gt;&gt; ".header.html"
    echo '&lt;link rel="stylesheet" href="blog.css" type="text/css" /&gt;' &gt;&gt; ".header.html"
    if [ "$global_feedburner" == "" ]; then
        echo '&lt;link rel="alternate" type="application/rss+xml" title="'$template_subscribe_browser_button'" href="'$blog_feed'" /&gt;' &gt;&gt; ".header.html"
    else 
        echo '&lt;link rel="alternate" type="application/rss+xml" title="'$template_subscribe_browser_button'" href="'$global_feedburner'" /&gt;' &gt;&gt; ".header.html"
    fi

    protected_mail="$(echo "$global_email" | sed 's/@/\&amp;#64;/g' | sed 's/\./\&amp;#46;/g')"
    echo '&lt;div id="footer"&gt;'$global_license '&lt;a href="'$global_author_url'"&gt;'$global_author'&lt;/a&gt; &amp;mdash; &lt;a href="mailto:'$protected_mail'"&gt;'$protected_mail'&lt;/a&gt;&lt;/div&gt;' &gt;&gt; ".footer.html"
}

# Delete the temporarily generated include files
delete_includes() {
    rm ".title.html" ".footer.html" ".header.html"
}

# Create the css file from scratch
create_css() {
    # To avoid overwriting manual changes. However it is recommended that
    # this function is modified if the user changes the blog.css file
    if [ ! -f "blog.css" ]; then 
        # blog.css directives will be loaded after main.css and thus will prevail
        echo '#title{font-size: x-large;}
        a.ablack{color:black !important;}
        li{margin-bottom:8px;}
        ul,ol{margin-left:24px;margin-right:24px;}
        #all_posts{margin-top:24px;text-align:center;}
        .subtitle{font-size:small;margin:12px 0px;}
        .content p{margin-left:24px;margin-right:24px;}
        h1{margin-bottom:12px !important;}
        #description{font-size:large;margin-bottom:12px;}
        h3{margin-top:42px;margin-bottom:8px;}
        h4{margin-left:24px;margin-right:24px;}
        #twitter{line-height:20px;vertical-align:top;text-align:right;font-style:italic;color:#333;margin-top:24px;font-size:14px;}' &gt; blog.css
    fi

    # This is the CSS file from my main page. Any other person would need it to run the blog
    # so it's attached here for convenience.
    if [ "$(whoami)" == "carlesfe" ] &amp;&amp; [ ! -f "main.css" ]; then
        ln -s "../style.css" "main.css" # XXX This is clearly machine-dependent, beware!
    elif [ ! -f "main.css" ]; then
        echo 'body{font-family:Georgia,"Times New Roman",Times,serif;margin:0;padding:0;background-color:#F3F3F3;}
        #divbodyholder{padding:5px;background-color:#DDD;width:874px;margin:24px auto;}
        #divbody{width:776px;border:solid 1px #ccc;background-color:#fff;padding:0px 48px 24px 48px;top:0;}
        .headerholder{background-color:#f9f9f9;border-top:solid 1px #ccc;border-left:solid 1px #ccc;border-right:solid 1px #ccc;}
        .header{width:800px;margin:0px auto;padding-top:24px;padding-bottom:8px;}
        .content{margin-bottom:45px;}
        .nomargin{margin:0;}
        .description{margin-top:10px;border-top:solid 1px #666;padding:10px 0;}
        h3{font-size:20pt;width:100%;font-weight:bold;margin-top:32px;margin-bottom:0;}
        .clear{clear:both;}
        #footer{padding-top:10px;border-top:solid 1px #666;color:#333333;text-align:center;font-size:small;font-family:"Courier New","Courier",monospace;}
        a{text-decoration:none;color:#003366 !important;}
        a:visited{text-decoration:none;color:#336699 !important;}
        blockquote{background-color:#f9f9f9;border-left:solid 4px #e9e9e9;margin-left:12px;padding:12px 12px 12px 24px;}
        blockquote img{margin:12px 0px;}
        blockquote iframe{margin:12px 0px;}' &gt; main.css
    fi
}

# Regenerates all the single post entries, keeping the post content but modifying
# the title, html structure, etc
rebuild_all_entries() {
    echo -n "Rebuilding all entries "

    for i in *.html; do # no need to sort
        if [ "$i" == "$index_file" ] || [ "$i" == "$archive_index" ]; then continue; fi
        contentfile=".tmp.$RANDOM"
        while [ -f "$contentfile" ]; do contentfile=".tmp.$RANDOM"; done

        echo -n "."
        # Get the title and entry, and rebuild the html structure from scratch (divs, title, description...)
        title="$(awk '/&lt;h3&gt;&lt;a class="ablack" href=".+"&gt;/, /&lt;\/a&gt;&lt;\/h3&gt;/{if (!/&lt;h3&gt;&lt;a class="ablack" href=".+"&gt;/ &amp;&amp; !/&lt;\/a&gt;&lt;\/h3&gt;/) print}' $i)"
        awk '/&lt;!-- text begin --&gt;/, /&lt;!-- text end --&gt;/{if (!/&lt;!-- text begin --&gt;/ &amp;&amp; !/&lt;!-- text end --&gt;/) print}' "$i" &gt;&gt; "$contentfile"

        # Original post timestamp
        timestamp="$(date -r $i +"%a, %d %b %Y %H:%M:%S %z" )"

        create_html_page "$contentfile" "$i.rebuilt" no "$title" "$timestamp"
        # keep the original timestamp!
        timestamp="$(date -r $i +'%Y%m%d%H%M')"
        mv "$i.rebuilt" "$i"
        chmod 644 "$i"
        touch -t $timestamp "$i"
        rm "$contentfile"
    done
    echo ""
}

# Displays the help
function usage() {
echo "$global_software_name v$global_software_version"
echo "Usage: $0 command [filename]"
echo ""
echo "Commands:"
echo "    post [filename]    insert a new blog post, or the FILENAME of a draft to continue editing it"
echo "    edit [filename]    edit an already published .html file. Never edit manually a published .html file,"
echo "                       always use this function as it keeps the original timestamp "
echo "                       and rebuilds whatever indices are needed"
echo "    rebuild            regenerates all the pages and posts, preserving the content of the entries"
echo "    reset              deletes blog-generated files. Use with a lot of caution and back up first!"
echo "    list               list all entries. Useful for debug"
echo ""
echo "For more information please open $0 in a code editor and read the header and comments"
}

# Delete all generated content, leaving only this script
reset() {
    echo "Are you sure you want to delete all blog entries? Please write \"Yes, I am!\" "
    read line
    if [ "$line" == "Yes, I am!" ]; then
        rm .*.html *.html *.css *.rss &amp;&gt; /dev/null
        echo
        echo "Deleted all posts, stylesheets and feeds."
        echo "Kept your old '.backup.tar.gz' just in case, please delete it manually if needed."
    else
        echo "Phew! You dodged a bullet there. Nothing was modified."
    fi
}

# Detects if GNU date is installed
date_version_detect() {
	date --version &gt;/dev/null 2&gt;&amp;1
	if [ $? -ne 0 ];  then
		# date utility is BSD. Test if gdate is installed 
		if gdate --version &gt;/dev/null 2&gt;&amp;1 ; then
            date() {
                gdate "$@"
            }
		else
		   echo ERROR: GNU date not found.
		   echo Try installing gdate utility or coreutils.
		   exit
		fi
	fi    
}

# Main function
# Encapsulated on its own function for readability purposes
#
# $1     command to run
# $2     file name of a draft to continue editing (optional)
do_main() {
    # Detect if using BSD date or GNU date
    date_version_detect
    # Load default configuration, then override settings with the config file
    global_variables
    [[ -f "$global_config" ]] &amp;&amp; source "$global_config" &amp;&gt; /dev/null 

    # Check for $EDITOR
    if [[ -z "$EDITOR" ]]; then
        echo "Please set your \$EDITOR environment variable"
        exit
    fi

    # Check for validity of argument
    if [ "$1" != "reset" ] &amp;&amp; [ "$1" != "post" ] &amp;&amp; [ "$1" != "rebuild" ] &amp;&amp; [ "$1" != "list" ] &amp;&amp; [ "$1" != "edit" ]; then 
        usage; exit; 
    fi

    if [ "$1" == "list" ]; then
        list_posts
        exit
    fi

    if [[ "$1" == "edit" ]]; then
        if [[ $# -lt 2 ]] || [[ ! -f "$2" ]]; then
            echo "Please enter a valid html file to edit"
            exit
        fi
    fi

    # Test for existing html files
    ls *.html &amp;&gt; /dev/null
    if [ $? -ne 0 ] &amp;&amp; [ "$1" == "rebuild" ]; then
        echo "Can't find any html files, nothing to rebuild"
        exit
    fi

    # We're going to back up just in case
    ls *.html &amp;&gt; /dev/null
    if [[ $? -eq 0 ]]; then
        tar cfz ".backup.tar.gz" *.html
        chmod 600 ".backup.tar.gz"
    fi

    if [ "$1" == "reset" ]; then
        reset
        exit
    fi

    create_includes
    create_css
    if [ "$1" == "post" ]; then write_entry "$2"; fi
    if [ "$1" == "rebuild" ]; then rebuild_all_entries; fi
    if [ "$1" == "edit" ]; then edit "$2"; fi
    rebuild_index
    all_posts
    make_rss
    delete_includes
}


#
# MAIN
# Do not change anything here. If you want to modify the code, edit do_main()
#
do_main $*
</pre></body></html>